<jsp:root xmlns:c="http://java.sun.com/jsp/jstl/core" xmlns:fn="http://java.sun.com/jsp/jstl/functions" xmlns:util="urn:jsptagdir:/WEB-INF/tags/util"
	xmlns:form="http://www.springframework.org/tags/form" xmlns:field="urn:jsptagdir:/WEB-INF/tags/form/fields" xmlns:jsp="http://java.sun.com/JSP/Page" xmlns:spring="http://www.springframework.org/tags" version="2.0">
  
  <jsp:output omit-xml-declaration="yes" />
  <jsp:directive.attribute name="id" type="java.lang.String" required="true" rtexprvalue="true" description="The identifier for this tag (do not change!)"/>
  <jsp:directive.attribute name="modelAttribute" type="java.lang.String" required="true" rtexprvalue="true" description="The name of the model attribute for form binding"/>
  <jsp:directive.attribute name="path" type="java.lang.String" required="true" rtexprvalue="true" description="Specify the relative URL path (wit leading /)" />
  <jsp:directive.attribute name="tabbed" type="java.lang.Boolean" required="false" rtexprvalue="true" description="Indicates if this should be rendered in tabs (default is true). " />
  <jsp:directive.attribute name="compositePkField" type="java.lang.String" required="false" rtexprvalue="true" description="The field name of the composite primary key (only used if a composite PK is present in the form backing object)" />
  <jsp:directive.attribute name="multipart" type="java.lang.Boolean" required="false" rtexprvalue="true" description="Indicate if this is a multipart form (default: false)" />
  <jsp:directive.attribute name="label" type="java.lang.String" required="false" rtexprvalue="true" description="The label used for this object, will default to a message bundle if not supplied"/>
  <jsp:directive.attribute name="render" type="java.lang.Boolean" required="false" rtexprvalue="true" description="Indicate if the contents of this tag and all enclosed tags should be rendered (default 'true')" />
  <jsp:directive.attribute name="z" type="java.lang.String" required="false" description="Used for checking if element has been modified (to recalculate simply provide empty string value)"/>
  <c:set value="${modelAttribute}" var="modelAttribute" scope="request"/> 
   
  <c:if test="${empty render or render}">
  	
    <c:set var="tabbed" value="${empty tabbed? true: tabbed}"/>
    
    <c:if test="${empty label}">
		<spring:message
			code="label_${fn:toLowerCase(fn:substringAfter(id,'_'))}"
			var="label" htmlEscape="false" />
    </c:if>
    <c:set var="enctype" value="application/x-www-form-urlencoded"/>
    <c:if test="${multipart}">
      <c:set var="enctype" value="multipart/form-data"/>
    </c:if>
    
    <spring:message arguments="${label}" code="entity_create" var="title_msg" htmlEscape="false" />
    <h1 class="sub-header">
        <c:out value="${title_msg}" />
    </h1>
	<div id="main-form-container" class="form-container">
      	<c:set var="jsCall" value=""/>
      	<c:if test="${not empty compositePkField}">
      	<c:set var="jsCall" value="encodePk()" />
      	</c:if>
      	<form:form id="main-form" action="${path}" method="POST" modelAttribute="${modelAttribute}" enctype="${enctype}" onsubmit="${jsCall}">
	        <div class="form-inner">
                <form:errors cssClass="errors" delimiter="&lt;p/&gt;"/>
    	        <c:if test="${not empty compositePkField}">
    				<form:hidden id="_${fn:escapeXml(compositePkField)}_id" path="${fn:escapeXml(compositePkField)}" />
    		          <script type="text/javascript">
    		          <![CDATA[
    		            dojo.require("dojox.encoding.base64");
    		            function encodePk() {
    		              var obj = new Object();
    		              dojo.query("input[name^=\"${compositePkField}.\"]").forEach(function(node, index, nodelist){
    		                obj[node.name.substring('${compositePkField}'.length + 1)] = node.value;
    		              });
    		              var json = dojo.toJson(obj);
    		              var tokArr = [];
    		              for (var i = 0; i < json.length; i++) {
    		                tokArr.push(json.charCodeAt(i));
    		              }
    		              var encoded = dojox.encoding.base64.encode(tokArr);
    		              dojo.byId('_${fn:escapeXml(compositePkField)}_id').value = encoded;
    		            }
    		          ]]>
    		          </script>
    	        </c:if>
    	        <jsp:doBody />
    	        <br/>
                <div class="form-buttons" id="main-form-buttons">
                    <field:button id="${fn:escapeXml(id)}_submit" type="submit" labelCode="button_finish"/>
                    <field:button id="${fn:escapeXml(id)}_cancel" type="reset" labelCode="button_cancel"/>
                    <script type="text/javascript">
                    Spring.addDecoration(new Spring.ValidateAllDecoration({elementId:'${fn:escapeXml(id)}_submit', event:'onclick'}));
                    </script>                  
    	        </div>
            </div>
        </form:form>
    </div>
    <script type="text/javascript">
    $(document).ready(function(e) {
    	$('form').validate({
    		//debug: true,
    		//submitHandler: 
    		//invalidHandler:null,
    		//ignore:':hidden',
    		//messages:{},
    		//onsubmit:true,
    		//onfocusout:true,
    		//onkeyup:true,
    		//onclick:true,
    		//focusInvalid:true,
    		//focusCleanup:false,
    		//errorClass:'error',
    		//validClass:'valid',
    		errorElement:'div'
    		//wrapper:null,
    		//errorLabelContainer:null,
    		//errorContainer:null,
    		//showErrors: (default),
    		//errorPlacement: function(error,element) {
    			
    		//},
    		//success: If specified, the error label is displayed to show a valid element. If a String is given, its added as a class to the label. If a Function is given, its called with the label (as a jQuery object) as its only argument. That can be used to add a text like "ok!".
    		//highlight: (adds the error class to both the invalid element and its label),
    		//unhighlight: (removes the errorClass),
    		//ignoreTitle:false
    	});
    });
    </script>
    <c:choose>
        <c:when test="${tabbed}">
        <script type="text/javascript">
          Spring.addDecoration(
                  new Spring.ElementDecoration({
                      elementId : 'main-form-container', 
                      widgetType : 'dijit.layout.TabContainer', 
                      widgetAttrs : {
                          id:'main-form-container',
                          region: 'center',
                          tabPosition: 'left-h',
                          style: 'height:100%;width:100%;',
                          class: 'mep-tabContainer',
                          tabStrip: true,
                          doLayout: false
                      }
                  })
          );
          
        </script>    
        </c:when>
        <c:otherwise>
            <script type="text/javascript">
            Spring.addDecoration(
                    new Spring.ElementDecoration({
                        elementId : 'main-form-container', 
                        widgetType : 'dijit.layout.ContentPane', 
                        widgetAttrs : {
                            id:'main-form-container',
                            class: 'no-tabs',
                            region: 'center',
                            doLayout: true
                        }
                    })
            );
            </script>
        </c:otherwise>
	</c:choose>
  </c:if>
</jsp:root>
